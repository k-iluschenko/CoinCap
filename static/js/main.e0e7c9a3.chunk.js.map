{"version":3,"sources":["Coins.js","App.js","serviceWorker.js","index.js"],"names":["Coins","sortCoint","this","props","coins","sort","a","b","marketCapUsd","length","map","item","price","priceUsd","react_default","createElement","key","id","name","toFixed","className","volumeUsd24Hr","listCoint","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","allCoins","undefined","_this2","setInterval","getCoints","_this3","fetch","then","res","status","Error","response","json","setState","data","catch","error","console","log","src_Coins","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAkCeA,sLA9BX,IAAMC,EAAYC,KAAKC,MAAMC,MAAMC,KAAK,SAACC,EAAGC,GAC1C,OAAKD,EAAEE,cAAgBD,EAAEC,aAChB,GAEJF,EAAEE,cAAgBD,EAAEC,cACf,EAEH,IAIT,OAFAP,EAAUQ,OAAS,GAEZR,EAAUS,IAAI,SAAAC,GACnB,IAAMC,GAASD,EAAKE,SACpB,OAAOC,EAAAR,EAAAS,cAAA,MAAIC,IAAKL,EAAKM,IACjBH,EAAAR,EAAAS,cAAA,UAAKJ,EAAKO,MACZJ,EAAAR,EAAAS,cAAA,eAAOH,EAAMO,QAAQ,IACnBL,EAAAR,EAAAS,cAAA,MAAIK,UAAU,qBAAqBT,EAAKH,cACxCM,EAAAR,EAAAS,cAAA,MAAIK,UAAU,qBAAqBT,EAAKU,mDAM9C,OAAKnB,KAAKC,MAAMC,MAGTU,EAAAR,EAAAS,cAAA,SAAOK,UAAU,eAAelB,KAAKoB,aAFnC,YA1BOC,aCuDLC,cArDb,SAAAA,EAAYrB,GAAO,IAAAsB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5B,KAAMC,KACD4B,MAAQ,CACXC,cAAUC,GAHKR,mFAOC,IAAAS,EAAAhC,KAClBiC,YAAY,WACVD,EAAKE,aACJ,yCAGO,IAAAC,EAAAnC,KACVoC,MAAM,+CACHC,KAAK,SAAAC,GAAG,OAAoB,MAAfA,EAAIC,OAAiBD,EAAM,IAAIE,MAAMF,KAClDD,KAAK,SAAAI,GAAQ,OAAIA,EAASC,SAC1BL,KAAK,SAAAI,GACJN,EAAKQ,SAAS,CAAEb,SAAUW,EAASG,SAEpCC,MAAO,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,sCAIxC,OAAK9C,KAAK6B,MAAMC,SAIdlB,EAAAR,EAAAS,cAAA,OAAKK,UAAU,kBACbN,EAAAR,EAAAS,cAAA,SAAOK,UAAU,eACfN,EAAAR,EAAAS,cAAA,aACED,EAAAR,EAAAS,cAAA,MAAIK,UAAU,eACZN,EAAAR,EAAAS,cAAA,UACED,EAAAR,EAAAS,cAAA,QAAMK,UAAU,eAAhB,6EAEFN,EAAAR,EAAAS,cAAA,UACED,EAAAR,EAAAS,cAAA,QAAMK,UAAU,eAAhB,2DAEFN,EAAAR,EAAAS,cAAA,MAAIK,UAAU,qBACZN,EAAAR,EAAAS,cAAA,QAAMK,UAAU,eAAhB,oIAEFN,EAAAR,EAAAS,cAAA,MAAIK,UAAU,qBACZN,EAAAR,EAAAS,cAAA,QAAMK,UAAU,eAAhB,uFAINN,EAAAR,EAAAS,cAACoC,EAAD,CAAO/C,MAAOF,KAAK6B,MAAMC,aArBtB,YA1BKT,aCSE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO5C,EAAAR,EAAAS,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.e0e7c9a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Coins extends Component {\n  listCoint() {\n    const sortCoint = this.props.coins.sort((a, b) => {\n      if (+a.marketCapUsd < +b.marketCapUsd) {\n        return 1;\n      }\n      if (+a.marketCapUsd > +b.marketCapUsd) {\n        return -1;\n      }\n      return 0;\n    });\n    sortCoint.length = 15;\n    \n    return sortCoint.map(item => {\n      const price = +item.priceUsd;\n      return <tr key={item.id}>\n          <td>{item.name}</td>\n        <td>$ {price.toFixed(6)}</td>\n          <td className=\"mobile__td-hidden\">{item.marketCapUsd}</td>\n          <td className=\"mobile__td-hidden\">{item.volumeUsd24Hr}</td>\n        </tr>;\n    });\n  }\n\n  render() {\n    if (!this.props.coins) {\n      return null;\n    }\n    return <tbody className=\"table__body\">{this.listCoint()}</tbody>;\n  }\n}\n\nexport default Coins;\n","import React, { Component } from 'react';\nimport Coins from './Coins';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allCoins: undefined,\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.getCoints();\n    }, 5000);\n  }\n\n  getCoints() {\n    fetch('https://api.coincap.io/v2/assets?limit=2000')\n      .then(res => (res.status === 200 ? res : new Error(res)))\n      .then(response => response.json())\n      .then(response => {\n        this.setState({ allCoins: response.data });\n      })\n      .catch (error => console.log('error', error));\n  }\n\n  render() {\n    if (!this.state.allCoins) {\n      return null;\n    }\n    return (\n      <div className=\"table__scroll \">\n        <table className=\"table__main\">\n          <thead>\n            <tr className=\"table__head\">\n              <th>\n                <span className=\"head__title\">Наименование</span>\n              </th>\n              <th>\n                <span className=\"head__title\">Стоимость</span>\n              </th>\n              <th className=\"mobile__td-hidden\">\n                <span className=\"head__title\">Рыночная капитализация</span>\n              </th>\n              <th className=\"mobile__td-hidden\">\n                <span className=\"head__title\">Суточный объем </span>\n              </th>\n            </tr>\n          </thead>\n          <Coins coins={this.state.allCoins}/>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/style.bundle.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}